{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { LIGHT, DARK } from \"../enums/theme\";\nimport { lightTheme, darkTheme, defaultTheme } from \"../theme\";\n\nfunction getTheme(themeName) {\n  switch (themeName) {\n    case LIGHT:\n      return _objectSpread(_objectSpread({}, defaultTheme), lightTheme);\n\n    case DARK:\n      return _objectSpread(_objectSpread({}, defaultTheme), darkTheme);\n\n    default:\n      return _objectSpread(_objectSpread({}, defaultTheme), lightTheme);\n  }\n}\n\nfunction useTheme() {\n  const {\n    0: themeName,\n    1: setThemeName\n  } = useState(\"\");\n  const {\n    0: theme,\n    1: setTheme\n  } = useState({});\n  useEffect(() => {\n    if (localStorage.getItem(\"theme\")) {\n      setThemeName(localStorage.getItem(\"theme\"));\n    } else if (window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n      setThemeName(DARK);\n    } else {\n      setThemeName(LIGHT);\n    }\n  }, []);\n  useEffect(() => {\n    setTheme(getTheme(themeName));\n  }, [themeName]);\n\n  const onSetThemeName = themeName => {\n    localStorage.setItem(\"theme\", themeName);\n    setThemeName(themeName);\n  };\n\n  return {\n    theme,\n    themeName,\n    setThemeName: onSetThemeName\n  };\n}\n\nexport default useTheme;","map":null,"metadata":{},"sourceType":"module"}