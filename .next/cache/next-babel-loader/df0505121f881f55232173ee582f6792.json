{
  "ast": null,
  "code": "var _s = $RefreshSig$();\n\nimport React, { useState, useLayoutEffect, useEffect } from \"react\";\nimport { LIGHT, DARK, DARKER } from \"../enums/theme\";\nimport { lightTheme, darkTheme, darkerTheme } from \"../theme\";\n\nfunction getTheme(themeName) {\n  switch (themeName) {\n    case LIGHT:\n      return lightTheme;\n\n    case DARK:\n      return darkTheme;\n\n    case DARKER:\n      return darkerTheme;\n\n    default:\n      return lightTheme;\n  }\n}\n\nfunction useTheme() {\n  _s();\n\n  var _useState = useState(),\n      themeName = _useState[0],\n      setThemeName = _useState[1];\n\n  var _useState2 = useState(),\n      theme = _useState2[0];\n\n  useLayoutEffect(function () {\n    if (localStorage.getItem(\"theme\")) {\n      console.log(\"localStorage\");\n      setThemeName(localStorage.getItem(\"theme\"));\n    } else if (window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n      console.log(\"matchesMedia\");\n      setThemeName(DARK);\n    } else {\n      setThemeName(LIGHT);\n    }\n  }, []);\n  useEffect(function () {\n    getTheme(themeName);\n  }, [themeName]);\n\n  var onSetThemeName = function onSetThemeName(themeName) {\n    localStorage.setItem(\"theme\", themeName);\n    setThemeName(themeName);\n  };\n\n  return {\n    theme: theme,\n    themeName: themeName,\n    setThemeName: onSetThemeName\n  };\n}\n\n_s(useTheme, \"LCMiFrmQwTYhO7mv1gCAv6rr1/8=\");\n\nexport default useTheme;",
  "map": {
    "version": 3,
    "sources": ["/Users/lq/dev/long-quan/ui/hooks/useTheme.js"],
    "names": [
      "React",
      "useState",
      "useLayoutEffect",
      "useEffect",
      "LIGHT",
      "DARK",
      "DARKER",
      "lightTheme",
      "darkTheme",
      "darkerTheme",
      "getTheme",
      "themeName",
      "useTheme",
      "setThemeName",
      "theme",
      "localStorage",
      "getItem",
      "console",
      "log",
      "window",
      "matchMedia",
      "matches",
      "onSetThemeName",
      "setItem"
    ],
    "mappings": ";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,eAA1B,EAA2CC,SAA3C,QAA4D,OAA5D;AAEA,SAASC,KAAT,EAAgBC,IAAhB,EAAsBC,MAAtB,QAAoC,gBAApC;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,WAAhC,QAAmD,UAAnD;;AAEA,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AAC3B,UAAQA,SAAR;AACE,SAAKP,KAAL;AACE,aAAOG,UAAP;;AACF,SAAKF,IAAL;AACE,aAAOG,SAAP;;AACF,SAAKF,MAAL;AACE,aAAOG,WAAP;;AACF;AACE,aAAOF,UAAP;AARJ;AAUD;;AAED,SAASK,QAAT,GAAoB;AAAA;;AAAA,kBACgBX,QAAQ,EADxB;AAAA,MACXU,SADW;AAAA,MACAE,YADA;;AAAA,mBAEFZ,QAAQ,EAFN;AAAA,MAEXa,KAFW;;AAIlBZ,EAAAA,eAAe,CAAC,YAAM;AACpB,QAAIa,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EAAmC;AACjCC,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAL,MAAAA,YAAY,CAACE,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAZ;AACD,KAHD,MAGO,IACLG,MAAM,CAACC,UAAP,IACAD,MAAM,CAACC,UAAP,CAAkB,8BAAlB,EAAkDC,OAF7C,EAGL;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACAL,MAAAA,YAAY,CAACR,IAAD,CAAZ;AACD,KANM,MAMA;AACLQ,MAAAA,YAAY,CAACT,KAAD,CAAZ;AACD;AACF,GAbc,EAaZ,EAbY,CAAf;AAeAD,EAAAA,SAAS,CAAC,YAAM;AACdO,IAAAA,QAAQ,CAACC,SAAD,CAAR;AACD,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;;AAIA,MAAMW,cAAc,GAAG,SAAjBA,cAAiB,CAAAX,SAAS,EAAI;AAClCI,IAAAA,YAAY,CAACQ,OAAb,CAAqB,OAArB,EAA8BZ,SAA9B;AACAE,IAAAA,YAAY,CAACF,SAAD,CAAZ;AACD,GAHD;;AAKA,SAAO;AAAEG,IAAAA,KAAK,EAALA,KAAF;AAASH,IAAAA,SAAS,EAATA,SAAT;AAAoBE,IAAAA,YAAY,EAAES;AAAlC,GAAP;AACD;;GA7BQV,Q;;AA+BT,eAAeA,QAAf",
    "sourcesContent": [
      "import React, { useState, useLayoutEffect, useEffect } from \"react\";\n\nimport { LIGHT, DARK, DARKER } from \"../enums/theme\";\nimport { lightTheme, darkTheme, darkerTheme } from \"../theme\";\n\nfunction getTheme(themeName) {\n  switch (themeName) {\n    case LIGHT:\n      return lightTheme;\n    case DARK:\n      return darkTheme;\n    case DARKER:\n      return darkerTheme;\n    default:\n      return lightTheme;\n  }\n}\n\nfunction useTheme() {\n  const [themeName, setThemeName] = useState();\n  const [theme] = useState();\n\n  useLayoutEffect(() => {\n    if (localStorage.getItem(\"theme\")) {\n      console.log(\"localStorage\");\n      setThemeName(localStorage.getItem(\"theme\"));\n    } else if (\n      window.matchMedia &&\n      window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n    ) {\n      console.log(\"matchesMedia\");\n      setThemeName(DARK);\n    } else {\n      setThemeName(LIGHT);\n    }\n  }, []);\n\n  useEffect(() => {\n    getTheme(themeName);\n  }, [themeName]);\n\n  const onSetThemeName = themeName => {\n    localStorage.setItem(\"theme\", themeName);\n    setThemeName(themeName);\n  };\n\n  return { theme, themeName, setThemeName: onSetThemeName };\n}\n\nexport default useTheme;\n"
    ]
  },
  "metadata": {},
  "sourceType": "module"
}
