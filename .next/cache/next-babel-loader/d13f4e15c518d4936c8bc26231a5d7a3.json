{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useState, useEffect } from \"react\";\nimport { LIGHT, DARK } from \"../enums/theme\";\nimport { lightTheme, darkTheme, defaultTheme } from \"../theme\";\n\nfunction getTheme(themeName) {\n  switch (themeName) {\n    case LIGHT:\n      return _objectSpread(_objectSpread({}, defaultTheme), lightTheme);\n\n    case DARK:\n      return _objectSpread(_objectSpread({}, defaultTheme), darkTheme);\n\n    default:\n      return _objectSpread(_objectSpread({}, defaultTheme), lightTheme);\n  }\n}\n\nfunction useTheme() {\n  const {\n    0: themeName,\n    1: setThemeName\n  } = useState(\"\");\n  const {\n    0: theme,\n    1: setTheme\n  } = useState({});\n  useEffect(() => {\n    if (localStorage.getItem(\"theme\")) {\n      setThemeName(localStorage.getItem(\"theme\"));\n    } else if (window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n      setThemeName(DARK);\n    } else {\n      setThemeName(LIGHT);\n    }\n  }, []);\n  useEffect(() => {\n    setTheme(getTheme(themeName));\n  }, [themeName]);\n\n  const onSetThemeName = themeName => {\n    localStorage.setItem(\"theme\", themeName);\n    setThemeName(themeName);\n  };\n\n  return {\n    theme,\n    themeName,\n    setThemeName: onSetThemeName\n  };\n}\n\nexport default useTheme;","map":{"version":3,"sources":["/Users/lq/dev/long-quan/ui/hooks/useTheme.js"],"names":["React","useState","useEffect","LIGHT","DARK","lightTheme","darkTheme","defaultTheme","getTheme","themeName","useTheme","setThemeName","theme","setTheme","localStorage","getItem","window","matchMedia","matches","onSetThemeName","setItem"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AAEA,SAASC,KAAT,EAAgBC,IAAhB,QAA4B,gBAA5B;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,YAAhC,QAAoD,UAApD;;AAEA,SAASC,QAAT,CAAkBC,SAAlB,EAA6B;AAC3B,UAAQA,SAAR;AACE,SAAKN,KAAL;AACE,6CAAYI,YAAZ,GAA6BF,UAA7B;;AACF,SAAKD,IAAL;AACE,6CAAYG,YAAZ,GAA6BD,SAA7B;;AACF;AACE,6CAAYC,YAAZ,GAA6BF,UAA7B;AANJ;AAQD;;AAED,SAASK,QAAT,GAAoB;AAClB,QAAM;AAAA,OAACD,SAAD;AAAA,OAAYE;AAAZ,MAA4BV,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM;AAAA,OAACW,KAAD;AAAA,OAAQC;AAAR,MAAoBZ,QAAQ,CAAC,EAAD,CAAlC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAJ,EAAmC;AACjCJ,MAAAA,YAAY,CAACG,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAD,CAAZ;AACD,KAFD,MAEO,IACLC,MAAM,CAACC,UAAP,IACAD,MAAM,CAACC,UAAP,CAAkB,8BAAlB,EAAkDC,OAF7C,EAGL;AACAP,MAAAA,YAAY,CAACP,IAAD,CAAZ;AACD,KALM,MAKA;AACLO,MAAAA,YAAY,CAACR,KAAD,CAAZ;AACD;AACF,GAXQ,EAWN,EAXM,CAAT;AAaAD,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,QAAQ,CAACL,QAAQ,CAACC,SAAD,CAAT,CAAR;AACD,GAFQ,EAEN,CAACA,SAAD,CAFM,CAAT;;AAIA,QAAMU,cAAc,GAAGV,SAAS,IAAI;AAClCK,IAAAA,YAAY,CAACM,OAAb,CAAqB,OAArB,EAA8BX,SAA9B;AACAE,IAAAA,YAAY,CAACF,SAAD,CAAZ;AACD,GAHD;;AAKA,SAAO;AAAEG,IAAAA,KAAF;AAASH,IAAAA,SAAT;AAAoBE,IAAAA,YAAY,EAAEQ;AAAlC,GAAP;AACD;;AAED,eAAeT,QAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\n\nimport { LIGHT, DARK } from \"../enums/theme\";\nimport { lightTheme, darkTheme, defaultTheme } from \"../theme\";\n\nfunction getTheme(themeName) {\n  switch (themeName) {\n    case LIGHT:\n      return { ...defaultTheme, ...lightTheme };\n    case DARK:\n      return { ...defaultTheme, ...darkTheme };\n    default:\n      return { ...defaultTheme, ...lightTheme };\n  }\n}\n\nfunction useTheme() {\n  const [themeName, setThemeName] = useState(\"\");\n  const [theme, setTheme] = useState({});\n\n  useEffect(() => {\n    if (localStorage.getItem(\"theme\")) {\n      setThemeName(localStorage.getItem(\"theme\"));\n    } else if (\n      window.matchMedia &&\n      window.matchMedia(\"(prefers-color-scheme: dark)\").matches\n    ) {\n      setThemeName(DARK);\n    } else {\n      setThemeName(LIGHT);\n    }\n  }, []);\n\n  useEffect(() => {\n    setTheme(getTheme(themeName));\n  }, [themeName]);\n\n  const onSetThemeName = themeName => {\n    localStorage.setItem(\"theme\", themeName);\n    setThemeName(themeName);\n  };\n\n  return { theme, themeName, setThemeName: onSetThemeName };\n}\n\nexport default useTheme;\n"]},"metadata":{},"sourceType":"module"}